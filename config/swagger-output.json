{
  "swagger": "2.0",
  "info": {
    "title": "NutriAID",
    "description": "NutriAid is a web application designed to bridge the gap between underprivileged individuals and volunteers willing to provide food aid.",
    "version": "1.0.0"
  },
  "host": "localhost:3500",
  "basePath": "/",
  "schemes": [
    "http"
  ],
  "paths": {
    "/register/": {
      "post": {
        "tags": [
          "User Routes"
        ],
        "summary": "Register a new User",
        "description": "This endpoint is used to register a new user.",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/auth/": {
      "post": {
        "tags": [
          "User Routes"
        ],
        "summary": "Authenticate/Login User",
        "description": "This endpoint is used to login as a user",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "example": "TestUserWithSQL"
                },
                "password": {
                  "example": "User123!"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/refresh/": {
      "get": {
        "tags": [
          "User Routes"
        ],
        "summary": "Refresh JWT Token",
        "description": "This endpoint is used to refresh the Json Web Access Token for the user, this is done by sending the refresh token in cookie",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/logout/": {
      "get": {
        "tags": [
          "User Routes"
        ],
        "summary": "Log Out User",
        "description": "This endpoint is used to logout the user, this is done by deleting the refresh token in cookie and in MongoDB",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/users/": {
      "get": {
        "tags": [
          "User Routes"
        ],
        "summary": "Retrieve all Users",
        "description": "This endpoint is used to obtain the information from all users, omitting password and refreshToken",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "User Routes"
        ],
        "summary": "Create a new User for admin only",
        "description": "This endpoint is used for admins to create a new user.",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "User Routes"
        ],
        "summary": "Retrieve a specific User",
        "description": " This endpoint is used to obtain the information from a specific user, omitting password and refreshToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          }
        ], "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "User Routes"
        ],
        "summary": "Update a specific User information via PUT",
        "description": " This endpoint is used to update the information from a specific user, have to input entire User Object",
          "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "User Routes"
        ],
        "summary": "Delete a specific User for admins only",
        "description": "This endpoint is used to delete a specific user. Only admins can delete users.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          }
        ],  "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "patch": {
        "tags": [
          "User Routes"
        ],
        "summary": "Update a specific User information via PATCH",
        "description": "This endpoint is used for users to update their own information, only having to input fields require to be updated",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "firstname",
              "properties": {
                "username": {
                  "example": "string"
                }
              }
            }
          }
        ], "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },

    "/pantry/{user_id}": { 
      "post": {
      "tags": [
        "Pantry Routes"
      ],
      "summary": "Create or retrieve pantry",
      "description": "Create a pantry for new users or retrieve an existing pantry",
      "parameters": [
        {
        "name": "user_id",
        "in": "path",
        "required": true,
        "type": "string"
        },
        {
        "name": "Authorization",
        "in": "header",
        "type": "string",
        "description": "Bearer token for authentication"
        }
      ],
      "security": [
        {
        "bearerAuth": []
        }
      ],
      "responses": {
        "200": {
        "description": "Existing pantry retrieved"
        },
        "201": {
        "description": "New pantry created"
        },
        "401": {
        "description": "Unauthorized"
        },
        "403": {
        "description": "Forbidden"
        },
        "500": {
        "description": "Internal Server Error"
        }
      }
      },
      "get": {
      "tags": [
        "Pantry Routes"
      ],
      "summary": "Get pantry ID by user ID",
      "description": "Retrieve the pantry ID for a given user ID",
      "parameters": [
        {
        "name": "user_id",
        "in": "path",
        "required": true,
        "type": "string"
        },
        {
        "name": "Authorization",
        "in": "header",
        "type": "string",
        "description": "Bearer token for authentication"
        }
      ],
      "security": [
        {
        "bearerAuth": []
        }
      ],
      "responses": {
        "200": {
        "description": "Successfully retrieved pantry ID"
        },
        "401": {
        "description": "Unauthorized"
        },
        "403": {
        "description": "Forbidden"
        },
        "404": {
        "description": "Pantry not found"
        }
      }
      }
    },
    "/pantry/ingredients": {
      "get": {
      "tags": [
        "Pantry Routes"
      ],
      "summary": "Get pantry ingredients via JWT Token",
      "description": "Retrieve ingredients of a pantry using the JWT Token",
      "parameters": [
      ],
      "security": [
        {
        "bearerAuth": []
        }
      ],
      "responses": {
        "200": {
        "description": "Successfully fetched pantry ingredients"
        },
        "401": {
        "description": "Unauthorized"
        },
        "403": {
        "description": "Forbidden"
        },
        "500": {
        "description": "Internal Server Error"
        }
      }
      }
    },
    "/pantry/{pantry_id}/ingredients": {
      "post": {
      "tags": [
        "Pantry Routes"
      ],
      "summary": "Add ingredient to pantry",
      "description": "Add a new ingredient to a specific pantry",
      "parameters": [
        {
        "name": "pantry_id",
        "in": "path",
        "required": true,
        "type": "string"
        },
        {
        "name": "Authorization",
        "in": "header",
        "type": "string",
        "description": "Bearer token for authentication"
        },
        {
          "name": "body",
          "in": "body",
          "required": true,
          "schema": {
            "type": "object",
            "properties": {
              "ingredient_name": {
                "example": "Orange"
              },
              "quantity": {
                "example": "5"
              }
            }
          }
        }
      ],
      "security": [
        {
        "bearerAuth": []
        }
      ],
      "responses": {
        "201": {
        "description": "Ingredient added successfully"
        },
        "401": {
        "description": "Unauthorized"
        },
        "403": {
        "description": "Forbidden"
        },
        "500": {
        "description": "Internal Server Error"
        }
      }
      },
      "get": {
      "tags": [
        "Pantry Routes"
      ],
      "summary": "Get ingredients in pantry",
      "description": "Retrieve all ingredients in a specific pantry",
      "parameters": [
        {
        "name": "pantry_id",
        "in": "path",
        "required": true,
        "type": "string"
        },
        {
        "name": "Authorization",
        "in": "header",
        "type": "string",
        "description": "Bearer token for authentication"
        }
      ],
      "security": [
        {
        "bearerAuth": []
        }
      ],
      "responses": {
        "200": {
        "description": "Successfully retrieved ingredients"
        },
        "401": {
        "description": "Unauthorized"
        },
        "403": {
        "description": "Forbidden"
        },
        "404": {
        "description": "No ingredients found"
        },
        "500": {
        "description": "Internal Server Error"
        }
      }
      },
      "put": {
      "tags": [
        "Pantry Routes"
      ],
      "summary": "Update ingredient in pantry",
      "description": "Update an ingredient's information in a pantry",
      "parameters": [
        {
        "name": "pantry_id",
        "in": "path",
        "required": true,
        "type": "string"
        },
        {
        "name": "Authorization",
        "in": "header",
        "type": "string",
        "description": "Bearer token for authentication"
        },
        {
        "name": "body",
        "in": "body",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
          "ingredient_id": {
            "type": "string",
            "example": "9200"
          },
          "quantity": {
            "type": "number",
            "example": 5
          }
          }
        }
        }
      ],
      "security": [
        {
        "bearerAuth": []
        }
      ],
      "responses": {
        "200": {
        "description": "Ingredient updated successfully"
        },
        "401": {
        "description": "Unauthorized"
        },
        "403": {
        "description": "Forbidden"
        },
        "500": {
        "description": "Internal Server Error"
        }
      }
      }
    },
    "/pantry/{pantry_id}/deductIngredientQuantity": {
      "put": {
      "tags": [
        "Pantry Routes"
      ],
      "summary": "Deduct Ingredient Quantity",
      "description": "Used to deduct a Ingredient Quantity via their Ingredient ID",
      "parameters": [
        {
        "name": "pantry_id",
        "in": "path",
        "required": true,
        "type": "string"
        },
        {
        "name": "Authorization",
        "in": "header",
        "type": "string"
        },
        {
        "name": "body",
        "in": "body",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
          "ingredient_id": {
            "example": 9200
          },
          "quantity": {
            "example": 2
          }
          }
        }
        }
      ],
      "security": [
        {
        "bearerAuth": []
        }
      ],
      "responses": {
        "200": {
        "description": "OK"
        },
        "401": {
        "description": "Unauthorized"
        },
        "403": {
        "description": "Forbidden"
        },
        "500": {
        "description": "Internal Server Error"
        }
      }
      }
    },
    "/pantry/{pantry_id}/addIngredientQuantity": {
      "put": {
      "tags": [
        "Pantry Routes"
      ],
      "summary": "Add Ingredient Quantity",
      "description": "Used to add a Ingredient Quantity via their Ingredient ID",
      "parameters": [
        {
        "name": "pantry_id",
        "in": "path",
        "required": true,
        "type": "string"
        },
        {
        "name": "Authorization",
        "in": "header",
        "type": "string"
        },
        {
        "name": "body",
        "in": "body",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
          "ingredient_id": {
            "example": 9200
          },
          "quantity": {
            "example": 2
          }
          }
        }
        }
      ],
      "security": [
        {
        "bearerAuth": []
        }
      ],
      "responses": {
        "200": {
        "description": "OK"
        },
        "401": {
        "description": "Unauthorized"
        },
        "403": {
        "description": "Forbidden"
        },
        "500": {
        "description": "Internal Server Error"
        }
      }
      }
    },
    "/pantry/{pantry_id}/deleteIngredient": {
      "delete": {
      "tags": [
        "Pantry Routes"
      ],
      "summary": "Delete ingredient from pantry",
      "description": "Remove an ingredient from a pantry",
      "parameters": [
        {
        "name": "pantry_id",
        "in": "path",
        "required": true,
        "type": "string"
        },
        {
        "name": "Authorization",
        "in": "header",
        "type": "string",
        "description": "Bearer token for authentication"
        },
        {
        "name": "body",
        "in": "body",
        "required": true,
        "schema": {
          "type": "object",
          "properties": {
          "ingredient_id": {
            "example": "9200"
          }
          }
        }
        }
      ],
      "security": [
        {
        "bearerAuth": []
        }
      ],
      "responses": {
        "200": {
        "description": "Ingredient deleted successfully"
        },
        "401": {
        "description": "Unauthorized"
        },
        "403": {
        "description": "Forbidden"
        },
        "500": {
        "description": "Internal Server Error"
        }
      }
      }
    },

    "/recipes/fetch": {
      "get": {
        "tags": [
          "Recipe Routes"
        ],
        "summary": "Fetch recipes from SpoonacularAPI",
        "description": "This endpoint is to obtain recipes from SpoonacularAPI and automatically insert them into the database",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          }
        ],"security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "402": {
            "description": "Payment Required"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/recipes/fetchuserrecipes": {
      "get": {
        "tags": [
          "Recipe Routes"
        ],
        "summary": "Fetch user recipes",
        "description": "This endpoint is to obtain recipes attached to the user from the Database, obtains userid from JWT",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          }
        ],"security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/recipes/fetchrecipesadmin": {
      "get": {
        "tags": [
          "Recipe Routes"
        ],
        "summary": "Fetch all recipes",
        "description": "This endpoint is to obtain all Recipes in the database, only admins can access this",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          }
        ],"security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/recipes/fetchingredients/{id}": {
      "get": {
        "tags": [
          "Recipe Routes"
        ],
        "summary": "Fetch ingredients from a specific recipe",
        "description": "This endpoint is to fetch ingredients from a specific recipe, input recipe id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          }
        ],"security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/recipes/insertrecipe": {
      "post": {
        "tags": [
          "Recipe Routes"
        ],
        "summary": "Insert a recipe",
        "description": "This endpoint is for users to insert a recipe into the database",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Recipe"
            }
          }
        ],"security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/recipes/insertrecipeingredients/{id}": {
      "post": {
        "tags": [
          "Recipe Routes"
        ],
        "summary": "Insert ingredients for a recipe",
        "description": "This endpoint is for users to insert ingredients required for a specific recipe, identified by recipe id in parameter, userid taken from JWT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RecipeIngredient"
            }
          }
        ],"security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Unauthorized"
          },
          "402": {
            "description": "Payment Required"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/recipes/getfilteredrecipes": {
      "post": {
        "tags": [
          "Recipe Routes"
        ],
        "summary": "Get filtered recipes",
        "description": "This endpoint is for users to post ingredients and get recipes that can be made with those ingredients, takes dietary information and userid from JWT",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Ingredient"
            }
          }
        ],"security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "402": {
            "description": "Payment Required"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/recipes/updaterecipedetails/{id}": {
      "put": {
        "tags": [
          "Recipe Routes"
        ],
        "summary": "Update a recipe via PUT",
        "description": "This endpoint is for users to update a recipe prexisiting in the database, recipeid taken from parameter, userid taken from JWT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Recipe"
            }
          }
        ],"security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/recipes/updaterecipeadmin/{id}": {
      "put": {
        "tags": [
          "Recipe Routes"
        ],
        "summary": "Update a recipe for admins only",
        "description": "This endpoint is for admins to update any recipe prexisiting in the database, recipeid taken from parameter.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Recipe"
            }
          }
        ],"security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/recipes/editrecipedetails/{id}": {
      "patch": {
        "tags": [
          "Recipe Routes"
        ],
        "summary": "Update a recipe via PATCH",
        "description": "This endpoint is for users to update a recipe prexisiting in the database, only keying in fields necessary, recipeid taken from parameter, userid taken from JWT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "servings": {
                  "type": "integer",
                  "format": "int32",
                  "example": 2
                },
                "readyInMinutes": {
                  "type": "integer",
                  "format": "int32",
                  "example": 6
                },
                "pricePerServing": {
                  "type": "number",
                  "format": "float",
                  "example": 500
                }
              }
            }
          }
        ],"security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/recipes/editrecipeadmin/{id}": {
      "patch": {
        "tags": [
          "Recipe Routes"
        ],
        "summary": "Update a recipe for admins only via PATCH",
        "description": "This endpoint is for admins to update any recipe, only inputting required parameters, recipeid taken from parameter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "servings": {
                  "type": "integer",
                  "format": "int32",
                  "example": 2
                },
                "readyInMinutes": {
                  "type": "integer",
                  "format": "int32",
                  "example": 6
                },
                "pricePerServing": {
                  "type": "number",
                  "format": "float",
                  "example": 500
                }
              }
            }
          }
        ],"security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/recipes/deleterecipe/{id}": {
      "delete": {
        "tags": [
          "Recipe Routes"
        ],
        "summary": "Delete a recipe",
        "description": "This endpoint is for users to delete a recipe from the database, recipeid taken from parameter, userid taken from JWT",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          }
        ],"security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/recipes/deleterecipeadmin/{id}": {
      "delete": {
        "tags": [
          "Recipe Routes"
        ],
        "summary": "Delete a recipe for admins only",
        "description": "This endpoint is for admins to delete any recipe prexisiting in the database, recipeid taken from parameter.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          }
        ],"security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/recipes/deleterecipeingredients/{id}": {
      "delete": {
        "tags": [
          "Recipe Routes"
        ],
        "summary": "Delete ingredients for a recipe",
        "description": "This endpoint is for admins to delete recipe ingredients prexisiting in the database, recipeid taken from parameter, ingredients is in request body",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "ingredient_id": {
                  "type": "string",
                  "example": "10115261"
                },
                "ingredient_name": {
                  "type": "string",
                  "example": "fish fillets"
                }
              },
              "additionalProperties": true
            }
          }
        ],"security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/requests/req": {
      "post": {
        "tags": [
          "Request Routes"
        ],
        "summary": "Create a new Request",
        "description": "This endpoint is used to create a new request",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string"
                },
                "category": {
                  "type": "string"
                },
                "description": {
                  "type": "string"
                },
                "user_id": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/requests/inglist": {
      "post": {
        "tags": [
          "Request Routes"
        ],
        "summary": "Create new Request Ingredient",
        "description": "This endpoint is used by the system when the Volunteer adds an ingredient that is not in the User's Request Ingredient",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "request_id": {
                  "type": "string"
                },
                "pantry_id": {
                  "type": "string"
                },
                "ingredient_id": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/requests/req/user/{id}": {
      "get": {
        "tags": [
          "Request Routes"
        ],
        "summary": "Retrieves all specific user's requests",
        "description": "This endpoint is used for Users to view their own requests",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/requests/available": {
      "get": {
        "tags": [
          "Request Routes"
        ],
        "summary": "Retrieves all available requests - volunteer_id & admin_id IS NULL, isCompleted is 0",
        "description": "This endpoint is for admins to view all available requests",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/requests/req/accepted/{id}": {
      "get": {
        "tags": [
          "Request Routes"
        ],
        "summary": "Retrieves all accepted routes accepted by the specificed volunteer id",
        "description": "This endpoint is for volunteers to view all their own accepted requests",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/requests/req/{id}": {
      "get": {
        "tags": [
          "Request Routes"
        ],
        "summary": "Retrieves the request with the specific request id",
        "description": "This endpoint is for Users, Volunteers and Admins to view requests by request id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Request Routes"
        ],
        "summary":"Deletes request with the appropriate request id",
        "description": "This endpoint is for Users and Admins to delete request",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/requests/req/ing/{id}": {
      "get": {
        "tags": [
          "Request Routes"
        ],
        "summary": "Get request ingredients by request id",
        "description": "This endpoint is used to retrieve request ingredients and details by request id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/requests/accepted": {
      "get": {
        "tags": [
          "Request Routes"
        ],
        "summary":"Retrieves request details with ingredients",
        "description": "This endpoint is used for Users, Volunteers and Admins to view more request details including ingredient quantity and name",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/requests/completed": {
      "get": {
        "tags": [
          "Request Routes"
        ],
        "summary":"Retrieves all completed request where isCompleted is TRUE",
        "description": "This endpoint is used by admins to view completed requests",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },

          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/requests/approved": {
      "get": {
        "tags": [
          "Request Routes"
        ],
        "summary":"Retrieves all approved requests where admin id is NOT NULL",
        "description": "This endpoint is used by Admins to view approved request",
        "parameters": [
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },

          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/requests/req/accepted/update/{id}": {
      "patch": {
        "tags": [
          "Request Routes"
        ],
        "summary":"Updates the request with the inputted volunteer id",
        "description": "This endpoint is used by Volunteers to accept requests",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "origin",
            "in": "header",
            "type": "string"
          },

          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "volunteer_id": {
                  "example": "string"
                }
              }
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/requests/req/completed/{id}": {
      "patch": {
        "tags": [
          "Request Routes"
        ],
        "summary":"Updates the request with the inputted request id to have isCompleted = true",
        "description": "This endpoint allows Users to update their request status to Completed",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/requests/req/approve/{id}": {
      "patch": {
        "tags": [
          "Request Routes"
        ],
        "summary":"Updates the request with the inputted admin_id",
        "description": "This endpoint is used by the Admins to approve the request",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Authorization",
            "in": "header",
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "admin_id": {
                  "example": "string"
                }
              }
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },  "securityDefinitions": {
    "bearerAuth": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "Enter your JWT token in the format **Bearer &lt;token&gt;**"
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "required": [
        "username",
        "password",
        "firstname",
        "lastname",
        "address",
        "email",
        "contact",
        "roles",
        "dateOfBirth"
      ],
      "properties": {
        "username": {
          "type": "string",
          "example": "TestUserWithSQL"
        },
        "password": {
          "type": "string",
          "example": "User123!"
        },
        "firstname": {
          "type": "string",
          "example": "Test"
        },
        "lastname": {
          "type": "string",
          "example": "User"
        },
        "roles": {
          "type": "object",
          "properties": {
            "User": {
              "type": "integer",
              "example": 2001
            }
          }
        },
        "address": {
          "type": "string",
          "example": "123 Main St"
        },
        "email": {
          "type": "string",
          "example": "john.doe.xxx@example.com"
        },
        "contact": {
          "type": "string",
          "example": "12345678"
        },
        "dietaryRestrictions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": ["Pescetarian", "Paleo"]
        },
        "intolerances": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": ["Sesame", "Shellfish"]
        },
        "excludedIngredients": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "example": ["fish", "chicken", "beef"]
        },
        "dateOfBirth": {
          "type": "string",
          "format": "date",
          "example": "2024-06-06"
        }
      }
    },
    "Ingredient": {
      "type": "object",
      "properties": {
        "ingredient_id": {
          "type": "string",
          "example": "10115261"
        },
        "ingredient_name": {
          "type": "string",
          "example": "fish fillets"
        }
      }
    },
    "RecipeIngredient": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "example": "apples"
        },
        "amount": {
          "type": "number",
          "format": "float",
          "example": 2
        },
        "unit": {
          "type": "string",
          "example": "g"
        }
      }
    },
    "Recipe": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "example": "912331"
        },
        "title": {
          "type": "string",
          "example": "TestRecipePost"
        },
        "imageurl": {
          "type": "string",
          "example": "https://img.spoonacular.com/recipes/639851-556x370.jpg"
        },
        "servings": {
          "type": "integer",
          "format": "int32",
          "example": 2
        },
        "readyInMinutes": {
          "type": "integer",
          "format": "int32",
          "example": 6
        },
        "pricePerServing": {
          "type": "number",
          "format": "float",
          "example": 500
        }
      }
    },
    "Request": {
    "type": "object",
    "properties": {
    "request_id": {
      "type": "string"
    },
    "title": {
      "type": "string"
    },
    "category": {
      "type": "string"
    },
    "description": {
      "type": "string"
    },
    "user_id": {
      "type": "string"
    },
    "volunteer_id": {
      "type": "string"
    },
    "isCompleted": {
      "type": "boolean"
    },
    "admin_id": {
      "type": "string"
    }}
  }
}}